import tailwindAnimate from 'tailwindcss-animate'
import defaultTheme from 'tailwindcss/defaultTheme'
import { adapter } from './tailwind.adapter'

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    ...adapter(),
    colors: {
      transparent: 'transparent',
      t: {
        primary: 'rgb(var(--colors-t-primary) / <alpha-value>)',
        secondary: 'rgb(var(--colors-t-secondary) / <alpha-value>)',
        fillSecondary: 'rgb(var(--colors-t-fill-secondary) / <alpha-value>)',
        third: 'rgb(var(--colors-t-third) / <alpha-value>)',
        disabled: 'rgb(var(--colors-t-disabled) / <alpha-value>)',
        placeholder: 'rgb(var(--colors-t-placeholder) / <alpha-value>)',
        onColor: 'rgb(var(--colors-t-onColor) / <alpha-value>)',
        consistent: 'rgb(var(--colors-t-consistent) / <alpha-value>)',
        inverse: 'rgb(var(--colors-t-inverse) / <alpha-value>)',
        error: 'rgb(var(--colors-t-error) / <alpha-value>)',
        buy: 'rgb(var(--colors-t-buy) / <alpha-value>)',
        sell: 'rgb(var(--colors-t-sell) / <alpha-value>)',
        link: 'rgb(var(--colors-t-link) / <alpha-value>)',
        linkHover: 'rgb(var(--colors-t-linkHover) / <alpha-value>)',
        white: 'rgb(var(--colors-t-white) / <alpha-value>)',
        emphasize: 'rgb(var(--colors-t-emphasize) / <alpha-value>)',
      },
      border: {
        line: 'rgb(var(--colors-border-line) / <alpha-value>)',
        lineSubtle: 'rgb(var(--colors-border-lineSubtle) / <alpha-value>)',
        lineStrong: 'rgb(var(--colors-border-lineStrong) / <alpha-value>)',
        newLine: 'rgb(var(--colors-border-new-line) / <alpha-value>)',
        inputSecondary: 'rgb(var(--colors-border-inputSecondary) / <alpha-value>)',
      },
      background: {
        bg1: 'rgb(var(--colors-background-bg1) / <alpha-value>)',
        bg2: 'rgb(var(--colors-background-bg2) / <alpha-value>)',
        bg1Accent01: 'rgb(var(--colors-background-bg1Accent01) / <alpha-value>)',
        bg1Accent02: 'rgb(var(--colors-background-bg1Accent02) / <alpha-value>)',
      },
      interactive: {
        disabled: 'rgb(var(--colors-interactive-disabled) / <alpha-value>)',
        fillDisabled: 'rgb(var(--colors-interactive-fillDisabled) / <alpha-value>)',
        primary: 'rgb(var(--colors-interactive-primary) / <alpha-value>)',
        borderGradientStart: 'rgb(var(--colors-interactive-borderGradientStart) / <alpha-value>)',
        borderGradientEnd: 'rgb(var(--colors-interactive-borderGradientEnd) / <alpha-value>)',
        cardGradientStart: 'rgb(var(--colors-interactive-cardGradientStart) / <alpha-value>)',
        cardGradientEnd: 'rgb(var(--colors-interactive-cardGradientEnd) / <alpha-value>)',
        primaryHover: 'rgb(var(--colors-interactive-primaryHover) / <alpha-value>)',
        primaryActive: 'rgb(var(--colors-interactive-primaryActive) / <alpha-value>)',
        primaryGradient: 'rgb(var(--colors-interactive-primaryGradient) / <alpha-value>)',
        primaryAccent01: 'rgb(var(--colors-interactive-primaryAccent01) / <alpha-value>)',
        primaryAccent02: 'rgb(var(--colors-interactive-primaryAccent02) / <alpha-value>)',
        buy: 'rgb(var(--colors-interactive-buy) / <alpha-value>)',
        buyHover: 'rgb(var(--colors-interactive-buyHover) / <alpha-value>)',
        buyActive: 'rgb(var(--colors-interactive-buyActive) / <alpha-value>)',
        sell: 'rgb(var(--colors-interactive-sell) / <alpha-value>)',
        sellHover: 'rgb(var(--colors-interactive-sellHover) / <alpha-value>)',
        sellActive: 'rgb(var(--colors-interactive-sellActive) / <alpha-value>)',
        sellGradient: 'rgb(var(--colors-interactive-sellGradient) / <alpha-value>)',
        sellAccent01: 'rgb(var(--colors-interactive-sellAccent01) / <alpha-value>)',
        interactiveBg: 'rgb(var(--colors-interactive-interactiveBg) / <alpha-value>)',
        interactiveBgHover: 'rgb(var(--colors-interactive-interactiveBgHover) / <alpha-value>)',
        interactiveBgActive: 'rgb(var(--colors-interactive-interactiveBgActive) / <alpha-value>)',
        interactiveBgSelected: 'rgb(var(--colors-interactive-interactiveBgSelected) / <alpha-value>)',
        interactive01: 'rgb(var(--colors-interactive-interactive01) / <alpha-value>)',
        interactive01Hover: 'rgb(var(--colors-interactive-interactive01Hover) / <alpha-value>)',
        interactive01Active: 'rgb(var(--colors-interactive-interactive01Active) / <alpha-value>)',
        interactive01Selected: 'rgb(var(--colors-interactive-interactive01Selected) / <alpha-value>)',
        interactive02: 'rgb(var(--colors-interactive-interactive02) / <alpha-value>)',
        interactive02Hover: 'rgb(var(--colors-interactive-interactive02Hover) / <alpha-value>)',
        interactive02Active: 'rgb(var(--colors-interactive-interactive02Active) / <alpha-value>)',
        interactive02Selected: 'rgb(var(--colors-interactive-interactive02Selected) / <alpha-value>)',
        interactivePopup: 'rgb(var(--colors-interactive-interactivePopup) / <alpha-value>)',
        interactiveTertiary: 'rgb(var(--colors-interactive-tertiary) / <alpha-value>)',
        interactiveTertiary20: 'rgb(var(--colors-interactive-tertiary20) / <alpha-value>)',
        interactiveExpandPositive: 'rgb(var(--colors-interactive-expandPositive) / <alpha-value>)',
        interactiveExpandDestructive: 'rgb(var(--colors-interactive-expandDestructive) / <alpha-value>)',
      },
      support: {
        success: 'rgb(var(--colors-support-success) / <alpha-value>)',
        error: 'rgb(var(--colors-support-error) / <alpha-value>)',
        warning: 'rgb(var(--colors-support-warning) / <alpha-value>)',
        info: 'rgb(var(--colors-support-info) / <alpha-value>)',
      },
      highLight: 'rgb(var(--colors-highLight) / <alpha-value>)',
      overlay: 'var(--colors-overlay)',
    },
    screens: {
      sm: '768px',
      md: '1024px',
      lg: '1300px',
      xl: '1400px',
      smh: {
        raw: '(min-height: 668px)',
      },
      mdh: {
        raw: '(min-height: 770px)',
      },
      smw: {
        raw: '(min-width: 430px)',
      },
    },
  },
  plugins: [tailwindAnimate],
}
